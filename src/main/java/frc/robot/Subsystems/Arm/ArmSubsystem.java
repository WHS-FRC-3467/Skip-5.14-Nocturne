// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.Subsystems.Arm;

import com.ctre.phoenix6.configs.TalonFXConfiguration;
import com.ctre.phoenix6.controls.Follower;
import com.ctre.phoenix6.hardware.TalonFX;

import edu.wpi.first.math.controller.ArmFeedforward;
import edu.wpi.first.math.controller.ProfiledPIDController;
import edu.wpi.first.math.trajectory.TrapezoidProfile;
import edu.wpi.first.math.trajectory.TrapezoidProfile.State;
import edu.wpi.first.wpilibj.DutyCycleEncoder;
import edu.wpi.first.wpilibj2.command.ProfiledPIDSubsystem;
import frc.robot.Constants.ArmConstants;
import frc.robot.Constants.CanConstants;
import frc.robot.Constants.DIOConstants;

/* 
 * ArmSubsystem - Subsystem to control all Arm motion using a Trapezoidal Profiled PID controller
 * 
 * For more details on how this works, see:
 * https://docs.wpilib.org/en/stable/docs/software/commandbased/profilepid-subsystems-commands.html
 *
 */
public class ArmSubsystem extends ProfiledPIDSubsystem {

    TalonFX m_armLead = new TalonFX(CanConstants.k_INTAKE_LEFT_CAN_ID);
    TalonFX m_armFollow = new TalonFX(CanConstants.k_INTAKE_RIGHT_CAN_ID);
    private DutyCycleEncoder m_encoder = new DutyCycleEncoder(DIOConstants.k_ARM_ENCODER_ID);

    private final ArmFeedforward m_feedforward = new ArmFeedforward(
            ArmConstants.kSVolts, ArmConstants.kGVolts,
            ArmConstants.kVVoltSecondPerRad, ArmConstants.kAVoltSecondSquaredPerRad);

    /*
     * Constructor
     */
    public ArmSubsystem() {

        super(
                new ProfiledPIDController(
                        ArmConstants.k_ARM_KP,
                        ArmConstants.k_ARM_KI,
                        ArmConstants.k_ARM_KD,
                        new TrapezoidProfile.Constraints(
                                ArmConstants.kMaxVelocityRadPerSecond,
                                ArmConstants.kMaxAccelerationRadPerSecSquared)),
                0);
        // Start arm at rest in neutral position
        setGoal(ArmConstants.k_ARM_ENCODER_OFFSET_RADIANS);

        TalonFXConfiguration m_armConfig = new TalonFXConfiguration();

        /*
         * config.supplyCurrLimit.enable = true;
         * config.supplyCurrLimit.triggerThresholdCurrent = 40; // the peak supply
         * current, in amps
         * config.supplyCurrLimit.triggerThresholdTime = 1.5; // the time at the peak
         * supply current before the limit triggers, in sec
         * config.supplyCurrLimit.currentLimit = 30; // the current to maintain if the
         * peak supply limit is triggered
         * m_armLead.configAllSettings(config); // apply the config settings; this
         * selects the quadrature encoder
         * m_armFollow.configAllSettings(config); // apply the config settings; this
         * selects the quadrature encoder
         * 
         * 
         * //ErrorCode error = motor.getLastError(); // gets the last error generated by
         * the motor controller
         * //Faults faults = new Faults();
         * //ErrorCode faultsError = motor.getFaults(faults); // fills faults with the
         * current motor controller faults; returns the last error generated
         * 
         * 
         * /*
         * Apply the configurations to the motors, and set one to follow the other in
         * the same direction
         */
        // m_armLeader.getConfigurator().apply(leadConfiguration);
        // m_armFollower.getConfigurator().apply(followerConfiguration);
        // m_armFollower.setControl(new Follower(m_armLeader.getDeviceID(), true));

    }

    @Override
    public void periodic() {

    }

    @Override
    protected void useOutput(double output, State setpoint) {

        // Calculate the feedforward from the sepoint
        double feedforward = m_feedforward.calculate(setpoint.position, setpoint.velocity);
        // Add the feedforward to the PID output to get the motor output
        m_armLead.setVoltage(output + feedforward);

    }

    @Override
    protected double getMeasurement() {

        return m_encoder.getDistance() + ArmConstants.k_ARM_ENCODER_OFFSET_RADIANS;

    }

}
